Contents

    ** Textindex

        weather_db> db.weather_data.createIndex({type:"text"})
        type_text

        weather_db> db.weather_data.getIndexes()
        [
        { v: 2, key: { _id: 1 }, name: '_id_' },
        { v: 2, key: { elvation: 1 }, name: 'elvation_1' },
        { v: 2, key: { 'dewPoint.value': 1 }, name: 'dewPoint.value_1' },
        {
            v: 2,
            key: { _fts: 'text', _ftsx: 1 },
            name: 'type_text',
            weights: { type: 1 },
            default_language: 'english',
            language_override: 'language',
            textIndexVersion: 3
        }
        ]
         
        
        weather_db> db.weather_data.find({$text:{$search:"SAO"}}).count()
        6
        weather_db> db.weather_data.find({$text:{$search:"SAO"}}).explain("executionStats")
        {
        explainVersion: '1',
        queryPlanner: {
            namespace: 'weather_db.weather_data',
            indexFilterSet: false,
            parsedQuery: {
            '$text': {
                '$search': 'SAO',
                '$language': 'english',
                '$caseSensitive': false,
                '$diacriticSensitive': false
            }
            },
            queryHash: '8BF6BFCC',
            planCacheKey: 'E2440218',
            maxIndexedOrSolutionsReached: false,
            maxIndexedAndSolutionsReached: false,
            maxScansToExplodeReached: false,
            winningPlan: {
            stage: 'TEXT_MATCH',
            indexPrefix: {},
            indexName: 'type_text',
            parsedTextQuery: {
                terms: [ 'sao' ],
                negatedTerms: [],
                phrases: [],
                negatedPhrases: []
            },
            textIndexVersion: 3,
            inputStage: {
                stage: 'FETCH',
                inputStage: {
                stage: 'IXSCAN',
                keyPattern: { _fts: 'text', _ftsx: 1 },
                indexName: 'type_text',
                isMultiKey: true,
                isUnique: false,
                isSparse: false,
                isPartial: false,
                indexVersion: 2,
                direction: 'backward',
                indexBounds: {}
                }
            }
            },
            rejectedPlans: []
        },
        executionStats: {
            executionSuccess: true,
            nReturned: 6,
            executionTimeMillis: 0,
            totalKeysExamined: 6,
            totalDocsExamined: 6,
            executionStages: {
            stage: 'TEXT_MATCH',
            nReturned: 6,
            executionTimeMillisEstimate: 0,
            works: 7,
            advanced: 6,
            needTime: 0,
            needYield: 0,
            saveState: 0,
            restoreState: 0,
            isEOF: 1,
            indexPrefix: {},
            indexName: 'type_text',
            parsedTextQuery: {
                terms: [ 'sao' ],
                negatedTerms: [],
                phrases: [],
                negatedPhrases: []
            },
            textIndexVersion: 3,
            docsRejected: 0,
            inputStage: {
                stage: 'FETCH',
                nReturned: 6,
                executionTimeMillisEstimate: 0,
                works: 7,
                advanced: 6,
                needTime: 0,
                needYield: 0,
                saveState: 0,
                restoreState: 0,
                isEOF: 1,
                docsExamined: 6,
                alreadyHasObj: 0,
                inputStage: {
                stage: 'IXSCAN',
                nReturned: 6,
                executionTimeMillisEstimate: 0,
                works: 7,
                advanced: 6,
                needTime: 0,
                needYield: 0,
                saveState: 0,
                restoreState: 0,
                isEOF: 1,
                keyPattern: { _fts: 'text', _ftsx: 1 },
                indexName: 'type_text',
                isMultiKey: true,
                isUnique: false,
                isSparse: false,
                isPartial: false,
                indexVersion: 2,
                direction: 'backward',
                indexBounds: {},
                keysExamined: 6,
                seeks: 1,
                dupsTested: 6,
                dupsDropped: 0
                }
            }
            }
        },
        command: {
            find: 'weather_data',
            filter: { '$text': { '$search': 'SAO' } },
            '$db': 'weather_db'
        },
        serverInfo: {
            host: 'Abhi',
            port: 27017,
            version: '6.0.6',
            gitVersion: '26b4851a412cc8b9b4a18cdb6cd0f9f642e06aa7'
        },
        serverParameters: {
            internalQueryFacetBufferSizeBytes: 104857600,
            internalQueryFacetMaxOutputDocSizeBytes: 104857600,
            internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
            internalDocumentSourceGroupMaxMemoryBytes: 104857600,
            internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
            internalQueryProhibitBlockingMergeOnMongoS: 0,
            internalQueryMaxAddToSetBytes: 104857600,
            internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600
        },
        ok: 1
        }
            
    ## skip()

     weather_db> db.weather_data.find({},{"dewPoint.value":true}).skip(20).limit(10)
        [
        {
            _id: ObjectId("5553a998e4b02cf7151190cc"),
            dewPoint: { value: 999.9 }
        },
        {
            _id: ObjectId("5553a998e4b02cf7151190cd"),
            dewPoint: { value: 999.9 }
        },
        {
            _id: ObjectId("5553a998e4b02cf7151190ce"),
            dewPoint: { value: 999.9 }
        },
        {
            _id: ObjectId("5553a998e4b02cf7151190cf"),
            dewPoint: { value: 21.1 }
        },
        {
            _id: ObjectId("5553a998e4b02cf7151190d0"),
            dewPoint: { value: 999.9 }
        },
        {
            _id: ObjectId("5553a998e4b02cf7151190d1"),
            dewPoint: { value: -1.6 }
        },
        {
            _id: ObjectId("5553a998e4b02cf7151190d2"),
            dewPoint: { value: 999.9 }
        },
        {
            _id: ObjectId("5553a998e4b02cf7151190d3"),
            dewPoint: { value: 999.9 }
        },
        {
            _id: ObjectId("5553a998e4b02cf7151190d4"),
            dewPoint: { value: 999.9 }
        },
        {
            _id: ObjectId("5553a998e4b02cf7151190d5"),
            dewPoint: { value: 999.9 }
        }
        ]           

    ## Aggregation Operations

    Aggregation Pipeline
        An aggregation pipeline consists of one or more stages that process documents:

        Each stage performs an operation on the input documents. For example, a stage can filter documents, group documents, and calculate values.

        The documents that are output from a stage are passed to the next stage.

        An aggregation pipeline can return results for groups of documents. For example, return the total, average, maximum, and minimum values.    


        example;

        db.orders.aggregate( [
        // Stage 1: Filter pizza order documents by pizza size
        {
            $match: { size: "medium" }
        },
        // Stage 2: Group remaining documents by pizza name and calculate total quantity
        {
            $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } }
        }
        ] )

        output;

        [
        { _id: 'Cheese', totalQuantity: 50 },
        { _id: 'Vegan', totalQuantity: 10 },
        { _id: 'Pepperoni', totalQuantity: 20 }
        ]